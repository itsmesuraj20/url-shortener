// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  role      Role     @default(USER)
  password  String?

  accounts  Account[]
  sessions  Session[]
  apiKeys   ApiKey[]
  links     Link[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id           String    @id @default(cuid())
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
  domain       String    @default("localhost")
  slug         String    @unique
  targetUrl    String
  passwordHash String?
  expiresAt    DateTime?
  active       Boolean   @default(true)
  title        String?
  tags         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  events       Event[]
}

model Event {
  id       String   @id @default(cuid())
  linkId   String
  link     Link     @relation(fields: [linkId], references: [id])
  ts       DateTime @default(now())
  ipHash   String
  country  String?
  referrer String?
  ua       String?
  device   String?
  os       String?
  browser  String?
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  keyHash   String   @unique
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
